# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cosmology
else:
    import _cosmology

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class dp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cosmology.dp_swiginit(self, _cosmology.new_dp())
    __swig_destroy__ = _cosmology.delete_dp

    def assign(self, value):
        return _cosmology.dp_assign(self, value)

    def value(self):
        return _cosmology.dp_value(self)

    def cast(self):
        return _cosmology.dp_cast(self)

    @staticmethod
    def frompointer(t):
        return _cosmology.dp_frompointer(t)

# Register dp in _cosmology:
_cosmology.dp_swigregister(dp)

def dp_frompointer(t):
    return _cosmology.dp_frompointer(t)

class cosmo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Om0 = property(_cosmology.cosmo_Om0_get, _cosmology.cosmo_Om0_set)
    Omk = property(_cosmology.cosmo_Omk_get, _cosmology.cosmo_Omk_set)
    w0 = property(_cosmology.cosmo_w0_get, _cosmology.cosmo_w0_set)
    wa = property(_cosmology.cosmo_wa_get, _cosmology.cosmo_wa_set)
    Omb = property(_cosmology.cosmo_Omb_get, _cosmology.cosmo_Omb_set)
    hval = property(_cosmology.cosmo_hval_get, _cosmology.cosmo_hval_set)
    th = property(_cosmology.cosmo_th_get, _cosmology.cosmo_th_set)
    s8 = property(_cosmology.cosmo_s8_get, _cosmology.cosmo_s8_set)
    nspec = property(_cosmology.cosmo_nspec_get, _cosmology.cosmo_nspec_set)
    ximax = property(_cosmology.cosmo_ximax_get, _cosmology.cosmo_ximax_set)
    cfac = property(_cosmology.cosmo_cfac_get, _cosmology.cosmo_cfac_set)

    def __init__(self):
        _cosmology.cosmo_swiginit(self, _cosmology.new_cosmo())
    __swig_destroy__ = _cosmology.delete_cosmo

# Register cosmo in _cosmology:
_cosmology.cosmo_swigregister(cosmo)

class gf_par(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Omega0 = property(_cosmology.gf_par_Omega0_get, _cosmology.gf_par_Omega0_set)
    OmegaL = property(_cosmology.gf_par_OmegaL_get, _cosmology.gf_par_OmegaL_set)
    w0 = property(_cosmology.gf_par_w0_get, _cosmology.gf_par_w0_set)
    wa = property(_cosmology.gf_par_wa_get, _cosmology.gf_par_wa_set)

    def __init__(self):
        _cosmology.gf_par_swiginit(self, _cosmology.new_gf_par())
    __swig_destroy__ = _cosmology.delete_gf_par

# Register gf_par in _cosmology:
_cosmology.gf_par_swigregister(gf_par)


def dTime(arg1, arg2):
    return _cosmology.dTime(arg1, arg2)

def dChi(arg1, arg2):
    return _cosmology.dChi(arg1, arg2)

def findmvir(arg1, arg2):
    return _cosmology.findmvir(arg1, arg2)

def E_sq(arg1, arg2):
    return _cosmology.E_sq(arg1, arg2)

def dE_sqdz(arg1, arg2):
    return _cosmology.dE_sqdz(arg1, arg2)

def getall(arg1, arg2, arg3, arg4, arg5):
    return _cosmology.getall(arg1, arg2, arg3, arg4, arg5)

def d2lnE_sqdz2(arg1, arg2):
    return _cosmology.d2lnE_sqdz2(arg1, arg2)

def gf_func(arg1, arg2, arg3, arg4):
    return _cosmology.gf_func(arg1, arg2, arg3, arg4)

def gf_jac(arg1, arg2, arg3, arg4, arg5):
    return _cosmology.gf_jac(arg1, arg2, arg3, arg4, arg5)

def findzmax(x, params):
    return _cosmology.findzmax(x, params)
class cosmology(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cosmology.delete_cosmology

    def __init__(self, *args):
        _cosmology.cosmology_swiginit(self, _cosmology.new_cosmology(*args))

    def cosmo_free(self):
        return _cosmology.cosmology_cosmo_free(self)

    def Chiofz_num(self, arg2):
        return _cosmology.cosmology_Chiofz_num(self, arg2)

    def Chiofz(self, arg2):
        return _cosmology.cosmology_Chiofz(self, arg2)

    def Dlofz(self, arg2):
        return _cosmology.cosmology_Dlofz(self, arg2)

    def Daofz(self, arg2):
        return _cosmology.cosmology_Daofz(self, arg2)

    def Daofzlh(self, arg2, arg3):
        return _cosmology.cosmology_Daofzlh(self, arg2, arg3)

    def growthfactor_num(self, arg2):
        return _cosmology.cosmology_growthfactor_num(self, arg2)

    def dlnDdln1pz(self, z):
        return _cosmology.cosmology_dlnDdln1pz(self, z)

    def set_optmf(self, arg2):
        return _cosmology.cosmology_set_optmf(self, arg2)

    def Delta2_L(self, arg2, arg3):
        return _cosmology.cosmology_Delta2_L(self, arg2, arg3)

    def Pk_L(self, arg2, arg3):
        return _cosmology.cosmology_Pk_L(self, arg2, arg3)

    def init_powerspectra_L(self):
        return _cosmology.cosmology_init_powerspectra_L(self)

    def Delta2_L_num(self, arg2, arg3):
        return _cosmology.cosmology_Delta2_L_num(self, arg2, arg3)

    def nofm(self, arg2, arg3):
        return _cosmology.cosmology_nofm(self, arg2, arg3)

    def bias(self, arg2, arg3):
        return _cosmology.cosmology_bias(self, arg2, arg3)

    def varM_TH_num(self, arg2, arg3):
        return _cosmology.cosmology_varM_TH_num(self, arg2, arg3)

    def varM_TH_num_deriv(self, arg2, arg3):
        return _cosmology.cosmology_varM_TH_num_deriv(self, arg2, arg3)

    def Nplus(self, arg2, arg3):
        return _cosmology.cosmology_Nplus(self, arg2, arg3)

    def getM(self, arg2, arg3):
        return _cosmology.cosmology_getM(self, arg2, arg3)

    def modelNFWhalo(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
        return _cosmology.cosmology_modelNFWhalo(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

    def modelNFWhalo_com(self, *args):
        return _cosmology.cosmology_modelNFWhalo_com(self, *args)

    def conc(self, arg2, arg3):
        return _cosmology.cosmology_conc(self, arg2, arg3)

    def ukofm(self, arg2, arg3, arg4):
        return _cosmology.cosmology_ukofm(self, arg2, arg3, arg4)

    def uskofm(self, arg2, arg3, arg4, arg5):
        return _cosmology.cosmology_uskofm(self, arg2, arg3, arg4, arg5)

    def ukinterp(self, arg2, arg3):
        return _cosmology.cosmology_ukinterp(self, arg2, arg3)

    def ukinit(self):
        return _cosmology.cosmology_ukinit(self)

    def ukinit2(self):
        return _cosmology.cosmology_ukinit2(self)

    def Eofz(self, arg2):
        return _cosmology.cosmology_Eofz(self, arg2)

    def setnew_z(self, arg2):
        return _cosmology.cosmology_setnew_z(self, arg2)
    z_glob = property(_cosmology.cosmology_z_glob_get, _cosmology.cosmology_z_glob_set)
    gf_glob = property(_cosmology.cosmology_gf_glob_get, _cosmology.cosmology_gf_glob_set)

    def getOmb(self):
        return _cosmology.cosmology_getOmb(self)

    def geth(self):
        return _cosmology.cosmology_geth(self)

    def getns(self):
        return _cosmology.cosmology_getns(self)

    def get_cfac(self):
        return _cosmology.cosmology_get_cfac(self)

    def set_cfac(self, arg2):
        return _cosmology.cosmology_set_cfac(self, arg2)

    def getzmax(self, xL):
        return _cosmology.cosmology_getzmax(self, xL)

    def getLmin(self, z, L1):
        return _cosmology.cosmology_getLmin(self, z, L1)

    def Time(self, arg2):
        return _cosmology.cosmology_Time(self, arg2)

    def Lookback(self, arg2):
        return _cosmology.cosmology_Lookback(self, arg2)

    def renew(self, p):
        return _cosmology.cosmology_renew(self, p)

# Register cosmology in _cosmology:
_cosmology.cosmology_swigregister(cosmology)

class np_params(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.np_params_cptr_get, _cosmology.np_params_cptr_set)
    z = property(_cosmology.np_params_z_get, _cosmology.np_params_z_set)
    Np = property(_cosmology.np_params_Np_get, _cosmology.np_params_Np_set)

    def __init__(self):
        _cosmology.np_params_swiginit(self, _cosmology.new_np_params())
    __swig_destroy__ = _cosmology.delete_np_params

# Register np_params in _cosmology:
_cosmology.np_params_swigregister(np_params)

class c_params(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.c_params_cptr_get, _cosmology.c_params_cptr_set)

    def __init__(self):
        _cosmology.c_params_swiginit(self, _cosmology.new_c_params())
    __swig_destroy__ = _cosmology.delete_c_params

# Register c_params in _cosmology:
_cosmology.c_params_swigregister(c_params)

class coll_params(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.coll_params_cptr_get, _cosmology.coll_params_cptr_set)
    sig = property(_cosmology.coll_params_sig_get, _cosmology.coll_params_sig_set)

    def __init__(self):
        _cosmology.coll_params_swiginit(self, _cosmology.new_coll_params())
    __swig_destroy__ = _cosmology.delete_coll_params

# Register coll_params in _cosmology:
_cosmology.coll_params_swigregister(coll_params)

class mvir_params(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.mvir_params_cptr_get, _cosmology.mvir_params_cptr_set)
    m200 = property(_cosmology.mvir_params_m200_get, _cosmology.mvir_params_m200_set)
    z = property(_cosmology.mvir_params_z_get, _cosmology.mvir_params_z_set)

    def __init__(self):
        _cosmology.mvir_params_swiginit(self, _cosmology.new_mvir_params())
    __swig_destroy__ = _cosmology.delete_mvir_params

# Register mvir_params in _cosmology:
_cosmology.mvir_params_swigregister(mvir_params)

class c200_params(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.c200_params_cptr_get, _cosmology.c200_params_cptr_set)
    cvir = property(_cosmology.c200_params_cvir_get, _cosmology.c200_params_cvir_set)
    omegaz = property(_cosmology.c200_params_omegaz_get, _cosmology.c200_params_omegaz_set)
    dcz = property(_cosmology.c200_params_dcz_get, _cosmology.c200_params_dcz_set)

    def __init__(self):
        _cosmology.c200_params_swiginit(self, _cosmology.new_c200_params())
    __swig_destroy__ = _cosmology.delete_c200_params

# Register c200_params in _cosmology:
_cosmology.c200_params_swigregister(c200_params)

class cvar_params(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.cvar_params_cptr_get, _cosmology.cvar_params_cptr_set)
    R = property(_cosmology.cvar_params_R_get, _cosmology.cvar_params_R_set)
    z = property(_cosmology.cvar_params_z_get, _cosmology.cvar_params_z_set)
    psinit = property(_cosmology.cvar_params_psinit_get, _cosmology.cvar_params_psinit_set)

    def __init__(self):
        _cosmology.cvar_params_swiginit(self, _cosmology.new_cvar_params())
    __swig_destroy__ = _cosmology.delete_cvar_params

# Register cvar_params in _cosmology:
_cosmology.cvar_params_swigregister(cvar_params)

class ksig_params(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.ksig_params_cptr_get, _cosmology.ksig_params_cptr_set)
    z = property(_cosmology.ksig_params_z_get, _cosmology.ksig_params_z_set)

    def __init__(self):
        _cosmology.ksig_params_swiginit(self, _cosmology.new_ksig_params())
    __swig_destroy__ = _cosmology.delete_ksig_params

# Register ksig_params in _cosmology:
_cosmology.ksig_params_swigregister(ksig_params)

class z_params(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.z_params_cptr_get, _cosmology.z_params_cptr_set)
    mag = property(_cosmology.z_params_mag_get, _cosmology.z_params_mag_set)

    def __init__(self):
        _cosmology.z_params_swiginit(self, _cosmology.new_z_params())
    __swig_destroy__ = _cosmology.delete_z_params

# Register z_params in _cosmology:
_cosmology.z_params_swigregister(z_params)



