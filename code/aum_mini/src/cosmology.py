# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cosmology')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cosmology')
    _cosmology = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cosmology', [dirname(__file__)])
        except ImportError:
            import _cosmology
            return _cosmology
        try:
            _mod = imp.load_module('_cosmology', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cosmology = swig_import_helper()
    del swig_import_helper
else:
    import _cosmology
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class dp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _cosmology.new_dp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosmology.delete_dp
    __del__ = lambda self: None

    def assign(self, value):
        return _cosmology.dp_assign(self, value)

    def value(self):
        return _cosmology.dp_value(self)

    def cast(self):
        return _cosmology.dp_cast(self)
    if _newclass:
        frompointer = staticmethod(_cosmology.dp_frompointer)
    else:
        frompointer = _cosmology.dp_frompointer
dp_swigregister = _cosmology.dp_swigregister
dp_swigregister(dp)

def dp_frompointer(t):
    return _cosmology.dp_frompointer(t)
dp_frompointer = _cosmology.dp_frompointer

class cosmo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cosmo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cosmo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Om0"] = _cosmology.cosmo_Om0_set
    __swig_getmethods__["Om0"] = _cosmology.cosmo_Om0_get
    if _newclass:
        Om0 = _swig_property(_cosmology.cosmo_Om0_get, _cosmology.cosmo_Om0_set)
    __swig_setmethods__["Omk"] = _cosmology.cosmo_Omk_set
    __swig_getmethods__["Omk"] = _cosmology.cosmo_Omk_get
    if _newclass:
        Omk = _swig_property(_cosmology.cosmo_Omk_get, _cosmology.cosmo_Omk_set)
    __swig_setmethods__["w0"] = _cosmology.cosmo_w0_set
    __swig_getmethods__["w0"] = _cosmology.cosmo_w0_get
    if _newclass:
        w0 = _swig_property(_cosmology.cosmo_w0_get, _cosmology.cosmo_w0_set)
    __swig_setmethods__["wa"] = _cosmology.cosmo_wa_set
    __swig_getmethods__["wa"] = _cosmology.cosmo_wa_get
    if _newclass:
        wa = _swig_property(_cosmology.cosmo_wa_get, _cosmology.cosmo_wa_set)
    __swig_setmethods__["Omb"] = _cosmology.cosmo_Omb_set
    __swig_getmethods__["Omb"] = _cosmology.cosmo_Omb_get
    if _newclass:
        Omb = _swig_property(_cosmology.cosmo_Omb_get, _cosmology.cosmo_Omb_set)
    __swig_setmethods__["hval"] = _cosmology.cosmo_hval_set
    __swig_getmethods__["hval"] = _cosmology.cosmo_hval_get
    if _newclass:
        hval = _swig_property(_cosmology.cosmo_hval_get, _cosmology.cosmo_hval_set)
    __swig_setmethods__["th"] = _cosmology.cosmo_th_set
    __swig_getmethods__["th"] = _cosmology.cosmo_th_get
    if _newclass:
        th = _swig_property(_cosmology.cosmo_th_get, _cosmology.cosmo_th_set)
    __swig_setmethods__["s8"] = _cosmology.cosmo_s8_set
    __swig_getmethods__["s8"] = _cosmology.cosmo_s8_get
    if _newclass:
        s8 = _swig_property(_cosmology.cosmo_s8_get, _cosmology.cosmo_s8_set)
    __swig_setmethods__["nspec"] = _cosmology.cosmo_nspec_set
    __swig_getmethods__["nspec"] = _cosmology.cosmo_nspec_get
    if _newclass:
        nspec = _swig_property(_cosmology.cosmo_nspec_get, _cosmology.cosmo_nspec_set)
    __swig_setmethods__["ximax"] = _cosmology.cosmo_ximax_set
    __swig_getmethods__["ximax"] = _cosmology.cosmo_ximax_get
    if _newclass:
        ximax = _swig_property(_cosmology.cosmo_ximax_get, _cosmology.cosmo_ximax_set)
    __swig_setmethods__["cfac"] = _cosmology.cosmo_cfac_set
    __swig_getmethods__["cfac"] = _cosmology.cosmo_cfac_get
    if _newclass:
        cfac = _swig_property(_cosmology.cosmo_cfac_get, _cosmology.cosmo_cfac_set)

    def __init__(self):
        this = _cosmology.new_cosmo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosmology.delete_cosmo
    __del__ = lambda self: None
cosmo_swigregister = _cosmology.cosmo_swigregister
cosmo_swigregister(cosmo)

class gf_par(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gf_par, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gf_par, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Omega0"] = _cosmology.gf_par_Omega0_set
    __swig_getmethods__["Omega0"] = _cosmology.gf_par_Omega0_get
    if _newclass:
        Omega0 = _swig_property(_cosmology.gf_par_Omega0_get, _cosmology.gf_par_Omega0_set)
    __swig_setmethods__["OmegaL"] = _cosmology.gf_par_OmegaL_set
    __swig_getmethods__["OmegaL"] = _cosmology.gf_par_OmegaL_get
    if _newclass:
        OmegaL = _swig_property(_cosmology.gf_par_OmegaL_get, _cosmology.gf_par_OmegaL_set)
    __swig_setmethods__["w0"] = _cosmology.gf_par_w0_set
    __swig_getmethods__["w0"] = _cosmology.gf_par_w0_get
    if _newclass:
        w0 = _swig_property(_cosmology.gf_par_w0_get, _cosmology.gf_par_w0_set)
    __swig_setmethods__["wa"] = _cosmology.gf_par_wa_set
    __swig_getmethods__["wa"] = _cosmology.gf_par_wa_get
    if _newclass:
        wa = _swig_property(_cosmology.gf_par_wa_get, _cosmology.gf_par_wa_set)

    def __init__(self):
        this = _cosmology.new_gf_par()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosmology.delete_gf_par
    __del__ = lambda self: None
gf_par_swigregister = _cosmology.gf_par_swigregister
gf_par_swigregister(gf_par)


def dTime(arg1, arg2):
    return _cosmology.dTime(arg1, arg2)
dTime = _cosmology.dTime

def dChi(arg1, arg2):
    return _cosmology.dChi(arg1, arg2)
dChi = _cosmology.dChi

def findmvir(arg1, arg2):
    return _cosmology.findmvir(arg1, arg2)
findmvir = _cosmology.findmvir

def E_sq(arg1, arg2):
    return _cosmology.E_sq(arg1, arg2)
E_sq = _cosmology.E_sq

def dE_sqdz(arg1, arg2):
    return _cosmology.dE_sqdz(arg1, arg2)
dE_sqdz = _cosmology.dE_sqdz

def getall(arg1, arg2, arg3, arg4, arg5):
    return _cosmology.getall(arg1, arg2, arg3, arg4, arg5)
getall = _cosmology.getall

def d2lnE_sqdz2(arg1, arg2):
    return _cosmology.d2lnE_sqdz2(arg1, arg2)
d2lnE_sqdz2 = _cosmology.d2lnE_sqdz2

def gf_func(arg1, arg2, arg3, arg4):
    return _cosmology.gf_func(arg1, arg2, arg3, arg4)
gf_func = _cosmology.gf_func

def gf_jac(arg1, arg2, arg3, arg4, arg5):
    return _cosmology.gf_jac(arg1, arg2, arg3, arg4, arg5)
gf_jac = _cosmology.gf_jac

def findzmax(x, params):
    return _cosmology.findzmax(x, params)
findzmax = _cosmology.findzmax
class cosmology(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cosmology, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cosmology, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cosmology.delete_cosmology
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _cosmology.new_cosmology(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def cosmo_free(self):
        return _cosmology.cosmology_cosmo_free(self)

    def Chiofz_num(self, arg2):
        return _cosmology.cosmology_Chiofz_num(self, arg2)

    def Chiofz(self, arg2):
        return _cosmology.cosmology_Chiofz(self, arg2)

    def Dlofz(self, arg2):
        return _cosmology.cosmology_Dlofz(self, arg2)

    def Daofz(self, arg2):
        return _cosmology.cosmology_Daofz(self, arg2)

    def Daofzlh(self, arg2, arg3):
        return _cosmology.cosmology_Daofzlh(self, arg2, arg3)

    def growthfactor_num(self, arg2):
        return _cosmology.cosmology_growthfactor_num(self, arg2)

    def dlnDdln1pz(self, z):
        return _cosmology.cosmology_dlnDdln1pz(self, z)

    def set_optmf(self, arg2):
        return _cosmology.cosmology_set_optmf(self, arg2)

    def Delta2_L(self, arg2, arg3):
        return _cosmology.cosmology_Delta2_L(self, arg2, arg3)

    def Pk_L(self, arg2, arg3):
        return _cosmology.cosmology_Pk_L(self, arg2, arg3)

    def init_powerspectra_L(self):
        return _cosmology.cosmology_init_powerspectra_L(self)

    def Delta2_L_num(self, arg2, arg3):
        return _cosmology.cosmology_Delta2_L_num(self, arg2, arg3)

    def nofm(self, arg2, arg3):
        return _cosmology.cosmology_nofm(self, arg2, arg3)

    def bias(self, arg2, arg3):
        return _cosmology.cosmology_bias(self, arg2, arg3)

    def varM_TH_num(self, arg2, arg3):
        return _cosmology.cosmology_varM_TH_num(self, arg2, arg3)

    def varM_TH_num_deriv(self, arg2, arg3):
        return _cosmology.cosmology_varM_TH_num_deriv(self, arg2, arg3)

    def Nplus(self, arg2, arg3):
        return _cosmology.cosmology_Nplus(self, arg2, arg3)

    def getM(self, arg2, arg3):
        return _cosmology.cosmology_getM(self, arg2, arg3)

    def modelNFWhalo(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
        return _cosmology.cosmology_modelNFWhalo(self, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

    def modelNFWhalo_com(self, *args):
        return _cosmology.cosmology_modelNFWhalo_com(self, *args)

    def conc(self, arg2, arg3):
        return _cosmology.cosmology_conc(self, arg2, arg3)

    def ukofm(self, arg2, arg3, arg4):
        return _cosmology.cosmology_ukofm(self, arg2, arg3, arg4)

    def uskofm(self, arg2, arg3, arg4, arg5):
        return _cosmology.cosmology_uskofm(self, arg2, arg3, arg4, arg5)

    def ukinterp(self, arg2, arg3):
        return _cosmology.cosmology_ukinterp(self, arg2, arg3)

    def ukinit(self):
        return _cosmology.cosmology_ukinit(self)

    def ukinit2(self):
        return _cosmology.cosmology_ukinit2(self)

    def Eofz(self, arg2):
        return _cosmology.cosmology_Eofz(self, arg2)

    def setnew_z(self, arg2):
        return _cosmology.cosmology_setnew_z(self, arg2)
    __swig_setmethods__["z_glob"] = _cosmology.cosmology_z_glob_set
    __swig_getmethods__["z_glob"] = _cosmology.cosmology_z_glob_get
    if _newclass:
        z_glob = _swig_property(_cosmology.cosmology_z_glob_get, _cosmology.cosmology_z_glob_set)
    __swig_setmethods__["gf_glob"] = _cosmology.cosmology_gf_glob_set
    __swig_getmethods__["gf_glob"] = _cosmology.cosmology_gf_glob_get
    if _newclass:
        gf_glob = _swig_property(_cosmology.cosmology_gf_glob_get, _cosmology.cosmology_gf_glob_set)

    def getOmb(self):
        return _cosmology.cosmology_getOmb(self)

    def geth(self):
        return _cosmology.cosmology_geth(self)

    def getns(self):
        return _cosmology.cosmology_getns(self)

    def get_cfac(self):
        return _cosmology.cosmology_get_cfac(self)

    def set_cfac(self, arg2):
        return _cosmology.cosmology_set_cfac(self, arg2)

    def getzmax(self, xL):
        return _cosmology.cosmology_getzmax(self, xL)

    def getLmin(self, z, L1):
        return _cosmology.cosmology_getLmin(self, z, L1)

    def Time(self, arg2):
        return _cosmology.cosmology_Time(self, arg2)

    def Lookback(self, arg2):
        return _cosmology.cosmology_Lookback(self, arg2)

    def renew(self, p):
        return _cosmology.cosmology_renew(self, p)
cosmology_swigregister = _cosmology.cosmology_swigregister
cosmology_swigregister(cosmology)

class np_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, np_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, np_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.np_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.np_params_cptr_get
    if _newclass:
        cptr = _swig_property(_cosmology.np_params_cptr_get, _cosmology.np_params_cptr_set)
    __swig_setmethods__["z"] = _cosmology.np_params_z_set
    __swig_getmethods__["z"] = _cosmology.np_params_z_get
    if _newclass:
        z = _swig_property(_cosmology.np_params_z_get, _cosmology.np_params_z_set)
    __swig_setmethods__["Np"] = _cosmology.np_params_Np_set
    __swig_getmethods__["Np"] = _cosmology.np_params_Np_get
    if _newclass:
        Np = _swig_property(_cosmology.np_params_Np_get, _cosmology.np_params_Np_set)

    def __init__(self):
        this = _cosmology.new_np_params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosmology.delete_np_params
    __del__ = lambda self: None
np_params_swigregister = _cosmology.np_params_swigregister
np_params_swigregister(np_params)

class c_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.c_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.c_params_cptr_get
    if _newclass:
        cptr = _swig_property(_cosmology.c_params_cptr_get, _cosmology.c_params_cptr_set)

    def __init__(self):
        this = _cosmology.new_c_params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosmology.delete_c_params
    __del__ = lambda self: None
c_params_swigregister = _cosmology.c_params_swigregister
c_params_swigregister(c_params)

class coll_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coll_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coll_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.coll_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.coll_params_cptr_get
    if _newclass:
        cptr = _swig_property(_cosmology.coll_params_cptr_get, _cosmology.coll_params_cptr_set)
    __swig_setmethods__["sig"] = _cosmology.coll_params_sig_set
    __swig_getmethods__["sig"] = _cosmology.coll_params_sig_get
    if _newclass:
        sig = _swig_property(_cosmology.coll_params_sig_get, _cosmology.coll_params_sig_set)

    def __init__(self):
        this = _cosmology.new_coll_params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosmology.delete_coll_params
    __del__ = lambda self: None
coll_params_swigregister = _cosmology.coll_params_swigregister
coll_params_swigregister(coll_params)

class mvir_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mvir_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mvir_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.mvir_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.mvir_params_cptr_get
    if _newclass:
        cptr = _swig_property(_cosmology.mvir_params_cptr_get, _cosmology.mvir_params_cptr_set)
    __swig_setmethods__["m200"] = _cosmology.mvir_params_m200_set
    __swig_getmethods__["m200"] = _cosmology.mvir_params_m200_get
    if _newclass:
        m200 = _swig_property(_cosmology.mvir_params_m200_get, _cosmology.mvir_params_m200_set)
    __swig_setmethods__["z"] = _cosmology.mvir_params_z_set
    __swig_getmethods__["z"] = _cosmology.mvir_params_z_get
    if _newclass:
        z = _swig_property(_cosmology.mvir_params_z_get, _cosmology.mvir_params_z_set)

    def __init__(self):
        this = _cosmology.new_mvir_params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosmology.delete_mvir_params
    __del__ = lambda self: None
mvir_params_swigregister = _cosmology.mvir_params_swigregister
mvir_params_swigregister(mvir_params)

class c200_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c200_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c200_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.c200_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.c200_params_cptr_get
    if _newclass:
        cptr = _swig_property(_cosmology.c200_params_cptr_get, _cosmology.c200_params_cptr_set)
    __swig_setmethods__["cvir"] = _cosmology.c200_params_cvir_set
    __swig_getmethods__["cvir"] = _cosmology.c200_params_cvir_get
    if _newclass:
        cvir = _swig_property(_cosmology.c200_params_cvir_get, _cosmology.c200_params_cvir_set)
    __swig_setmethods__["omegaz"] = _cosmology.c200_params_omegaz_set
    __swig_getmethods__["omegaz"] = _cosmology.c200_params_omegaz_get
    if _newclass:
        omegaz = _swig_property(_cosmology.c200_params_omegaz_get, _cosmology.c200_params_omegaz_set)
    __swig_setmethods__["dcz"] = _cosmology.c200_params_dcz_set
    __swig_getmethods__["dcz"] = _cosmology.c200_params_dcz_get
    if _newclass:
        dcz = _swig_property(_cosmology.c200_params_dcz_get, _cosmology.c200_params_dcz_set)

    def __init__(self):
        this = _cosmology.new_c200_params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosmology.delete_c200_params
    __del__ = lambda self: None
c200_params_swigregister = _cosmology.c200_params_swigregister
c200_params_swigregister(c200_params)

class cvar_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cvar_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cvar_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.cvar_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.cvar_params_cptr_get
    if _newclass:
        cptr = _swig_property(_cosmology.cvar_params_cptr_get, _cosmology.cvar_params_cptr_set)
    __swig_setmethods__["R"] = _cosmology.cvar_params_R_set
    __swig_getmethods__["R"] = _cosmology.cvar_params_R_get
    if _newclass:
        R = _swig_property(_cosmology.cvar_params_R_get, _cosmology.cvar_params_R_set)
    __swig_setmethods__["z"] = _cosmology.cvar_params_z_set
    __swig_getmethods__["z"] = _cosmology.cvar_params_z_get
    if _newclass:
        z = _swig_property(_cosmology.cvar_params_z_get, _cosmology.cvar_params_z_set)
    __swig_setmethods__["psinit"] = _cosmology.cvar_params_psinit_set
    __swig_getmethods__["psinit"] = _cosmology.cvar_params_psinit_get
    if _newclass:
        psinit = _swig_property(_cosmology.cvar_params_psinit_get, _cosmology.cvar_params_psinit_set)

    def __init__(self):
        this = _cosmology.new_cvar_params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosmology.delete_cvar_params
    __del__ = lambda self: None
cvar_params_swigregister = _cosmology.cvar_params_swigregister
cvar_params_swigregister(cvar_params)

class ksig_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ksig_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ksig_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.ksig_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.ksig_params_cptr_get
    if _newclass:
        cptr = _swig_property(_cosmology.ksig_params_cptr_get, _cosmology.ksig_params_cptr_set)
    __swig_setmethods__["z"] = _cosmology.ksig_params_z_set
    __swig_getmethods__["z"] = _cosmology.ksig_params_z_get
    if _newclass:
        z = _swig_property(_cosmology.ksig_params_z_get, _cosmology.ksig_params_z_set)

    def __init__(self):
        this = _cosmology.new_ksig_params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosmology.delete_ksig_params
    __del__ = lambda self: None
ksig_params_swigregister = _cosmology.ksig_params_swigregister
ksig_params_swigregister(ksig_params)

class z_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, z_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, z_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.z_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.z_params_cptr_get
    if _newclass:
        cptr = _swig_property(_cosmology.z_params_cptr_get, _cosmology.z_params_cptr_set)
    __swig_setmethods__["mag"] = _cosmology.z_params_mag_set
    __swig_getmethods__["mag"] = _cosmology.z_params_mag_get
    if _newclass:
        mag = _swig_property(_cosmology.z_params_mag_get, _cosmology.z_params_mag_set)

    def __init__(self):
        this = _cosmology.new_z_params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosmology.delete_z_params
    __del__ = lambda self: None
z_params_swigregister = _cosmology.z_params_swigregister
z_params_swigregister(z_params)

# This file is compatible with both classic and new-style classes.


